{"version":3,"sources":["registerServiceWorker.js","lib/HelperFuncs.js","stores/MyStorageManager.js","components/DefaultStyledComp.js","components/Storage/StyledComp.js","components/Storage/QuotaStat.js","components/Storage/InputField.js","components/Storage/LocalSessionStorage.js","components/Storage/IndexedDB.js","components/Storage/MyCacheStorage.js","pages/StorageDemo.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","ONE_MB","ByteToMB","bytes","thresh","Math","abs","units","u","length","toFixed","getStr","size","chars","split","len","random_data","push","random","join","useMyStorageManager","create","set","get","quota","total","usage","updateQuota","NewQuota","state","SDefault","Btn","styled","button","props","backgroundColor","color","padding","width","fontSize","disabled","InputField","input","Link","SStorage","Wrapper","div","InfoWrapper","span","Value","Section","section","SectionOuter","PlainSectionOuter","Clear","ClearAll","StaleData","h3","enableNotification","Notification","permission","requestPermission","then","alert","requestPersistStorage","a","navigator","storage","persist","persistent","console","log","checkPersistentStorage","postTask","isPersistedStorage","persisted","QuotaStat","refetch","setRefetch","useState","isPersisted","setIsPersisted","useEffect","checkInterval","setInterval","status","estimate","catch","error","fetchQuota","clearInterval","toString","toUpperCase","onClick","style","display","margin","type","defaultVal","placeholder","rest","inp","setInp","parseInt","value","onChange","e","target","localStorage","sessionStorage","getStorageSize","storageType","key","hasOwnProperty","getItem","addData2Storage","postError","setItem","name","emptyStorage","clear","Storage","totalSize","setTotalSize","inpSize","setInpSize","auto","setAuto","handleStorageChange","clearAllBtn","document","getElementById","addEventListener","removeEventListener","sizeCheckTimer","NewStorageSize","autoAddTimer","kMB","LocalStorage","SessionStorage","DB_NAME","STORES","users","messages","channel","BroadcastChannel","SAMPLE_KEY","getTableSize","DBInstance","DBName","Promise","resolve","reject","transaction","objectStore","openCursor","onsuccess","event","cursor","result","storedObject","json","JSON","stringify","continue","bind","onerror","err","getDBSize","connect2DB","tableNames","tableSizeGetters","reduce","acc","tableName","all","sizes","forEach","i","totalDBSize","val","closeDBConnection","objectStoreNames","print","msg","request","indexedDB","open","onupgradeneeded","currentTarget","store","contains","deleteObjectStore","createObjectStore","put","onblocked","close","addData2IDB_Safe","itemSize","data","storeName","Date","toLocaleTimeString","objectStoreRequest","preventDefault","stopPropagation","emptyIndexedDB","cleanupTask","delRequest","deleteDatabase","retrieveItemByKey","Database","loading","setLoading","key2Del","setKey2Del","staleData","setStaleData","itemValue","setItemValue","singleItemSize","setSingleItemSize","withUpdate","setWithUpdate","onmessage","action","getItemDataByKey","height","delete","oncomplete","commit","deleteItemByKey_Safe","postMessage","id","checked","htmlFor","CACHE_NAME","addToCaches","cacheSize","path","now","content","Response","caches","cacheObj","emptyCache","cache","keys","reload","MyCacheStorage","StorageDemo","className","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.03fa3060.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const ONE_MB = 1024 * 1024;\n\nexport function randomNumber(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nfunction guid() {\n  let s4 = () => {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  };\n  return (\n    s4() +\n    s4() +\n    \"-\" +\n    s4() +\n    \"-\" +\n    s4() +\n    \"-\" +\n    s4() +\n    \"-\" +\n    s4() +\n    s4() +\n    s4()\n  );\n}\n\nexport const generateUID = () => {\n  const id = guid();\n  return id;\n};\n\nexport const isEmpty = (obj) =>\n  obj === null || obj === undefined || Object.keys(obj).length === 0;\n\nexport function ByteToMB(bytes) {\n  let thresh = 1024;\n  if (Math.abs(bytes) < thresh) {\n    return bytes + \" B\";\n  }\n  const units = [\"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n  let u = -1;\n  do {\n    bytes /= thresh;\n    ++u;\n  } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n  return bytes.toFixed(1) + \" \" + units[u];\n}\n\nexport function getStr(size = ONE_MB) {\n  let chars = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n  let len = chars.length;\n  let random_data = [];\n\n  while (size--) {\n    random_data.push(chars[(Math.random() * len) | 0]);\n  }\n\n  return random_data.join(\"\");\n}\n\nexport function shallowEqual(object1, object2) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (let key of keys1) {\n    if (object1[key] !== object2[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import produce from \"immer\";\nimport create from \"zustand\";\n\nconst useMyStorageManager = create((set, get) => ({\n  quota: {\n    total: 0,\n    usage: 0,\n  },\n  updateQuota: (NewQuota) =>\n    set((state) => (state.quota = {...state.quota, ...NewQuota})),\n}));\n\nexport default useMyStorageManager;\n","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst SDefault = {};\n\nSDefault.Btn = styled.button`\n  background-color: ${(props) =>\n    props.backgroundColor ? props.backgroundColor : \"#0096ff\"};\n  color: ${(props) => (props.color ? props.color : \"white\")};\n  padding: ${(props) => (props.padding ? props.padding : \"10px 20px\")};\n  width: ${(props) => (props.width ? props.width : \"auto\")};\n  font-size: ${(props) => (props.fontSize ? props.fontSize : \"1em\")};\n  border-radius: 4px;\n  height: auto;\n  box-shadow: none;\n  border: none;\n  opacity: ${(props) => (props.disabled ? 0.5 : 1)};\n  outline: none;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nSDefault.InputField = styled.input`\n  display: block;\n  width: auto;\n  padding: 10px;\n  font-size: ${(props) => (props.fontSize ? props.fontSize : \"1em\")};\n  &:focus {\n    outline: none;\n    box-shadow: none;\n  }\n`;\n\nSDefault.Link = styled(Link)`\n  position: absolute;\n  text-decoration: none;\n  padding: 10px;\n  color: block;\n  font-weight: bold;\n  font-size: 1.2em;\n  color:white;\n  background-color: #008fe5;\n`;\n\nexport default SDefault;\n","import styled, { keyframes } from \"styled-components\";\nimport SDefault from \"../DefaultStyledComp\";\n\nconst SStorage = {};\n\nSStorage.Wrapper = styled.div`\n  padding: 24px;\n  min-width: 680px;\n  font-size: 18px;\n`;\n\nSStorage.Btn = styled(SDefault.Btn)`\n  float: right;\n  width: 100px;\n  margin: 40px 0 35px 30px;\n  text-align: center;\n  outline: none;\n  opacity: 0.9;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nSStorage.InfoWrapper = styled.span`\n  position: relative;\n  top: 50%;\n`;\n\nSStorage.Value = styled.span`\n  font-size: 1.2em;\n  font-weight: bold;\n`;\n\nSStorage.Section = styled.section`\n  position: relative;\n  display: block;\n  border-top: 1px solid lightgray;\n  margin: 26px auto;\n  clear: both;\n  height: 100px;\n  width: 80%;\n  padding: 0 10px;\n  @media (max-width: 990px) {\n    width: 100%;\n  }\n`;\n\nSStorage.SectionOuter = styled(SStorage.Section)`\n  border: none;\n  margin-top: 10vh;\n`;\nSStorage.PlainSectionOuter = styled(SStorage.Section)`\n  border: none;\n`;\nSStorage.Btn.Clear = styled(SStorage.Btn)`\n  background: #d44500;\n  width: 100px;\n`;\nSStorage.Btn.ClearAll = styled(SStorage.Btn)`\n  margin: -30px auto;\n  width: 220px;\n  float: right;\n  background: #d44500;\n`;\n\nSStorage.InputField = styled(SDefault.InputField)`\n  float: right;\n  margin: 40px 0 0 20px;\n  text-align: center;\n  padding: 8px;\n  border: none;\n  border-bottom: 1px solid black;\n  width: ${(props) => (props.width ? props.width : \"40px\")};\n`;\n\nSStorage.StaleData = styled.h3`\n  display: block;\n  margin: 10px 0;\n  color: red;\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nexport default SStorage;\n","import React, { useState, useEffect } from \"react\";\nimport { ByteToMB } from \"../../lib/HelperFuncs\";\nimport useMyStorageManager from \"../../stores/MyStorageManager\";\nimport SStorage from \"./StyledComp\";\n\nfunction enableNotification() {\n  if (Notification.permission === \"granted\") return;\n  if (!(\"Notification\" in window)) {\n    alert(\"This browser does not support desktop notification\");\n  } else {\n    Notification.requestPermission().then(function (permission) {\n      if (permission === \"granted\") {\n        alert(\"Notification enabled!\");\n        return true;\n      }\n    });\n  }\n  return false;\n}\nconst requestPersistStorage = async () => {\n  if (Notification.permission !== \"granted\") {\n    let enabled = enableNotification();\n    if (!enabled) {\n      alert(\"Allow notification before persisting storage\");\n      return;\n    }\n  }\n  if (navigator.storage && navigator.storage.persist)\n    navigator.storage.persist().then(function (persistent) {\n      if (persistent)\n        console.log(\n          \"Storage is persisted\"\n        );\n      else\n        console.log(\"Storage is NOT persisted\");\n    });\n};\n\nexport const checkPersistentStorage = async (postTask) => {\n  let isPersistedStorage = false;\n  if (navigator.storage && navigator.storage.persist) {\n    isPersistedStorage = await navigator.storage.persisted();\n    postTask(isPersistedStorage);\n  }\n};\n\nexport function fetchQuota(updateQuota) {\n  if (!updateQuota) return;\n  navigator.storage\n    .estimate()\n    .then(({ quota, usage }) => {\n      updateQuota({ total: quota, usage: usage });\n    })\n    .catch((error) => console.log(\"ERROR \", error));\n}\n\nconst QuotaStat = ({ refetch, setRefetch }) => {\n  const [isPersisted, setIsPersisted] = useState(true);\n  const quota = useMyStorageManager((state) => state.quota);\n  const updateQuota = useMyStorageManager((state) => state.updateQuota);\n\n  useEffect(() => {\n    enableNotification();\n    let checkInterval = setInterval(() => {\n      checkPersistentStorage((status) => setIsPersisted(status));\n      fetchQuota(updateQuota);\n    }, 1000);\n\n    return () => {\n      clearInterval(checkInterval);\n    };\n  }, []);\n  return (\n    <SStorage.SectionOuter>\n      <p>\n        isPersisted ={\" \"}\n        <SStorage.Value>{isPersisted.toString().toUpperCase()}</SStorage.Value>\n        <SStorage.Btn\n          onClick={requestPersistStorage}\n          style={{\n            display: \"inline-block\",\n            width: \"auto\",\n            margin: \"-8px 0 0 0\",\n          }}\n        >\n          Persist storage\n        </SStorage.Btn>\n      </p>\n      <div>Quota = Cache + IndexedDB. DOMStorage (local + session) is not included in Quota</div>\n      <div>\n        Used ={\" \"}\n        <SStorage.Value>\n          {ByteToMB(quota.usage)} / {ByteToMB(quota.total)}<small> </small>\n        </SStorage.Value>\n      </div>\n      <div>\n        Available ={\" \"}\n        <SStorage.Value>{ByteToMB(quota.total - quota.usage)}</SStorage.Value>\n      </div>\n    </SStorage.SectionOuter>\n  );\n};\n\nexport { QuotaStat };\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SStorage from \"./StyledComp\";\n\nconst InputField = (props) => {\n  const { type=\"string\", defaultVal = \"1\", placeholder, postTask, ...rest } = props;\n  const [inp, setInp] = useState(defaultVal);\n  const handleInp = (e) => setInp(e.target.value);\n  useEffect(() => {\n    if (inp) {\n      if (type=== \"number\") postTask(parseInt(inp));\n      else postTask(inp);\n    }\n  }, [inp]);\n  return <SStorage.InputField style={rest} placeholder={placeholder} value={inp} onChange={handleInp} />;\n};\n\nInputField.propTypes = {\n  defaultVal: PropTypes.string,\n  postTask: PropTypes.func.isRequired,\n};\n\nexport { InputField };\n","import { useEffect, useState } from \"react\";\nimport { getStr, ONE_MB } from \"../../lib/HelperFuncs\";\nimport { InputField } from \"./InputField\";\nimport SStorage from \"./StyledComp\";\n\nconst { localStorage, sessionStorage } = window;\n\nexport function getStorageSize(storageType) {\n  let total = 0;\n  for (let key in storageType) {\n    if (storageType.hasOwnProperty(key)) {\n      total += key.length + storageType.getItem(key).length;\n    }\n  }\n  return (total / ONE_MB).toFixed(0); // MB\n}\n\nexport function addData2Storage(\n  storageType,\n  size,\n  postTask = null,\n  postError = null\n) {\n  const key = `key${storageType.length + 1}_${size}MB`;\n  try {\n    storageType.setItem(key, getStr(size * ONE_MB));\n    if (postTask) postTask();\n  } catch (error) {\n    alert(`ERROR: '${error.name}'`);\n    if (postError) postError();\n  }\n}\n\nexport function emptyStorage(storageType) {\n  storageType.clear();\n}\n\nexport const Storage = ({ storageType, name }) => {\n  const [totalSize, setTotalSize] = useState(storageType.length);\n  const [inpSize, setInpSize] = useState(2);\n  const [auto, setAuto] = useState(false);\n\n  const handleAutoAdd2Storage = () => setAuto(!auto);\n  const handleAdd2Storage = () => {\n    addData2Storage(storageType, inpSize, () => {\n      console.log(`${name}: ADDED ${inpSize}MB`);\n      setTotalSize(getStorageSize(storageType));\n    });\n  };\n  const handleEmptyStorage = () => {\n    emptyStorage(storageType); // sync\n    setTotalSize(storageType.length);\n  };\n\n  const handleNewInpSize = (kMB) => setInpSize(kMB);\n\n  useEffect(() => {\n    const handleStorageChange = () => setTotalSize(getStorageSize(storageType));\n    const clearAllBtn = document.getElementById(\"clearAll-Btn\");\n    clearAllBtn.addEventListener(\"click\", handleStorageChange);\n    return () => {\n      clearAllBtn.removeEventListener(\"click\", handleStorageChange);\n    };\n  }, []);\n\n  useEffect(() => {\n    const sizeCheckTimer = setInterval(() => {\n      const NewStorageSize = getStorageSize(storageType);\n      if (NewStorageSize !== inpSize) setTotalSize(NewStorageSize);\n    }, 1500);\n    return () => {\n      clearInterval(sizeCheckTimer);\n    };\n  }, []);\n\n  useEffect(() => {\n    let autoAddTimer;\n    if (auto) {\n      autoAddTimer = setInterval(() => {\n        addData2Storage(\n          storageType,\n          inpSize,\n          () => {\n            console.log(`${name}: ADDED ${inpSize}MB`);\n            setTotalSize(getStorageSize(storageType));\n          },\n          () => {\n            setAuto(!auto);\n          }\n        );\n      }, 1000);\n    } else {\n      clearInterval(autoAddTimer);\n    }\n    return () => {\n      clearInterval(autoAddTimer);\n    };\n  }, [auto, totalSize, inpSize]);\n\n  return (\n    <>\n      <SStorage.Section>\n        <SStorage.InfoWrapper>\n          {name} = <SStorage.Value>{totalSize}MB</SStorage.Value>\n        </SStorage.InfoWrapper>\n        <SStorage.Btn.Clear onClick={handleEmptyStorage}>\n          Empty\n        </SStorage.Btn.Clear>\n        <SStorage.Btn onClick={handleAutoAdd2Storage} style={{ width: \"auto\" }}>\n          {auto ? \"Auto OFF\" : \"Auto ON\"}\n        </SStorage.Btn>\n        <SStorage.Btn onClick={handleAdd2Storage}>Add</SStorage.Btn>\n        <InputField\n          type=\"number\"\n          defaultVal={`${inpSize}`}\n          postTask={handleNewInpSize}\n        />\n      </SStorage.Section>\n    </>\n  );\n};\n\nexport const LocalStorage = () => (\n  <Storage storageType={localStorage} name={\"Local Storage\"} />\n);\nexport const SessionStorage = () => (\n  <Storage storageType={sessionStorage} name={\"Session Storage\"} />\n);\n","import React, { useEffect, useState, useRef, createRef } from \"react\";\nimport { getStr, ONE_MB, ByteToMB } from \"../../lib/HelperFuncs\";\nimport useMyStorageManager from \"../../stores/MyStorageManager\";\nimport { InputField } from \"./InputField\";\nimport SStorage from \"./StyledComp\";\n\nexport const DB_NAME = \"demo_db\";\nexport const STORES = {\n  users: \"users\",\n  messages: \"messages\",\n};\n\nconst channel = new BroadcastChannel(\"idb_changes\");\nconst SAMPLE_KEY = \"myid\";\n\nexport function getTableSize(DBInstance, DBName) {\n  return new Promise((resolve, reject) => {\n    let size = 0;\n    let transaction = DBInstance.transaction([DBName])\n      .objectStore(DBName)\n      .openCursor();\n\n    transaction.onsuccess = function (event) {\n      let cursor = event.target.result;\n      if (cursor) {\n        let storedObject = cursor.value;\n        let json = JSON.stringify(storedObject);\n        size += json.length;\n        cursor.continue();\n      } else {\n        resolve(size);\n      }\n    }.bind(this);\n    transaction.onerror = function (err) {\n      reject(\"error in \" + DBName + \": \" + err);\n    };\n  });\n}\n\nexport function getDBSize(postTask = null) {\n  connect2DB((DBInstance) => {\n    let tableNames = [...DBInstance.objectStoreNames];\n    let val = (function (tableNames, DBInstance) {\n      let tableSizeGetters = tableNames.reduce((acc, tableName) => {\n        acc.push(getTableSize(DBInstance, tableName));\n        return acc;\n      }, []);\n\n      return Promise.all(tableSizeGetters)\n        .then((sizes) => {\n          console.log(\"--------- \" + DBInstance.name + \" ---------\");\n          tableNames.forEach((tableName, i) => {\n            console.log(tableName + \"\\t: \" + ByteToMB(sizes[i]));\n          });\n          let totalDBSize = sizes.reduce(function (acc, val) {\n            return acc + val;\n          }, 0);\n          return totalDBSize;\n        })\n        .then((result) => {\n          closeDBConnection(DBInstance);\n          if (postTask) postTask(result);\n        });\n    })(tableNames, DBInstance);\n  });\n}\n\nexport function print(msg) {\n  console.log(msg);\n}\n\nexport function connect2DB(postTask = null) {\n  const request = indexedDB.open(DB_NAME);\n  request.onerror = (error) => {\n    print(\"IndexedDB ERR: FAILED TO CONNECT\", error);\n  };\n  request.onsuccess = function () {\n    // print(\"IndexedDB: CONNECTED TO DB\");\n    if (postTask) postTask(request.result);\n  };\n  request.onupgradeneeded = function (e) {\n    const DBInstance = e.currentTarget.result;\n    for (let store in STORES) {\n      if (DBInstance.objectStoreNames.contains(store))\n        DBInstance.deleteObjectStore(store);\n      let objectStore = DBInstance.createObjectStore(store);\n      if (store === STORES.messages) {\n        objectStore.put(\"1234\", SAMPLE_KEY);\n      }\n    }\n\n    connect2DB(postTask);\n  };\n  request.onblocked = () => {\n    print(\"IndexedDB: CONNECTION WAS BLOCKED\", error);\n  };\n}\n\nexport function closeDBConnection(DBInstance) {\n  if (DBInstance) {\n    DBInstance.close();\n    // print(\"IndexedDB: CONNECTION CLOSED\");\n  } else print(\"IndexedDB: DB NOT FOUND\");\n}\n\nexport function addData2IDB_Safe(\n  itemSize,\n  key = null,\n  data = null,\n  postTask = null\n) {\n  const storeName = STORES.messages;\n  if (itemSize || !data) data = getStr(itemSize * ONE_MB);\n  if (!key) key = `${new Date().toLocaleTimeString()}_msg_${itemSize}MB`;\n  try {\n    connect2DB((DBInstance) => {\n      const transaction = DBInstance.transaction([storeName], \"readwrite\");\n      const objectStore = transaction.objectStore(storeName);\n      const objectStoreRequest = objectStore.put(data, key);\n\n      transaction.onerror = (event) => {\n        let error = event.target.error;\n        print(`IndexedDB: transaction error`, error);\n        if (error.name === \"ConstraintError\") {\n          alert(\"Key existed !\");\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      };\n\n      objectStoreRequest.onerror = (event) => {\n        print(\"IndexedDB ERR: FAILED TO ADD DATA\");\n      };\n      objectStoreRequest.onsuccess = function () {\n        print(\n          `[${new Date().toLocaleTimeString()}] IndexedDB: ADDED ${itemSize}MB`\n        );\n        closeDBConnection(DBInstance);\n        if (postTask) postTask();\n      };\n      objectStoreRequest.onblocked = () => {\n        print(`IndexedDB: BLOCKED ADDING ${itemSize}MB`);\n      };\n    });\n  } catch (error) {\n    print(\"IndexedDB ERR:\", error);\n  }\n}\n\nexport function deleteItemByKey_Safe(\n  key,\n  storeName = STORES.messages,\n  postTask = null\n) {\n  try {\n    connect2DB((DBInstance) => {\n      const transaction = DBInstance.transaction([storeName], \"readwrite\");\n      const objectStore = transaction.objectStore(storeName);\n      const objectStoreRequest = objectStore.delete(key);\n      objectStoreRequest.onerror = () => {\n        print(\"IndexedDB ERR: FAILED TO DELETE\", key);\n      };\n      objectStoreRequest.onsuccess = function () {\n        print(\"IndexedDB: DATA ROW DELETED\", key);\n        closeDBConnection(DBInstance);\n        if (postTask) postTask();\n      };\n      transaction.oncomplete = () => {\n        console.log(\"delete completed\");\n        closeDBConnection(DBInstance);\n      };\n      transaction.commit();\n    });\n  } catch (error) {\n    console.log(\"IndexedDB ERR:\", error);\n  }\n}\n\nexport const emptyIndexedDB = (cleanupTask = null) => {\n  const delRequest = window.indexedDB.deleteDatabase(DB_NAME);\n  delRequest.onsuccess = function () {\n    console.log(\"IndexedDB: \", DB_NAME, \"IS DELETED\");\n    connect2DB((DBInstance) => {\n      closeDBConnection(DBInstance);\n    });\n\n    if (cleanupTask) cleanupTask();\n  };\n  delRequest.onerror = function () {\n    alert(\"IndexedDB: FAILED TO DELETE\", DB_NAME);\n  };\n  delRequest.onblocked = function () {\n    alert(\"IndexedDB: OPERATION BEING BLOCKED\");\n  };\n};\n\nexport const retrieveItemByKey = (storeName, key, postTask = null) => {\n  try {\n    connect2DB((DBInstance) => {\n      const transaction = DBInstance.transaction([storeName], \"readonly\");\n      const objectStore = transaction.objectStore(storeName);\n      const objectStoreRequest = objectStore.get(key);\n\n      objectStoreRequest.onerror = (event) => {\n        print(\"IndexedDB ERR: FAILED TO GET\", key);\n      };\n      objectStoreRequest.onsuccess = function () {\n        closeDBConnection(DBInstance);\n        if (postTask) postTask(objectStoreRequest.result);\n      };\n    });\n  } catch (error) {\n    print(\"IndexedDB ERR:\", error);\n  }\n};\n\nconst Database = () => {\n  const [loading, setLoading] = useState(true);\n  const [inpSize, setInpSize] = useState(1);\n  const [totalSize, setTotalSize] = useState(0);\n  const [key2Del, setKey2Del] = useState();\n  const [auto, setAuto] = useState(false);\n  const [staleData, setStaleData] = useState(\"\");\n  const [itemValue, setItemValue] = useState(\"\");\n  const [singleItemSize, setSingleItemSize] = useState(1);\n  const [withUpdate, setWithUpdate] = useState(false);\n  const updateQuota = useMyStorageManager((state) => state.updateQuota);\n\n  channel.onmessage = (e) => {\n    const { action, store, key } = e.data;\n    switch (action) {\n      case \"UPDATE\":\n        getItemDataByKey(store, key);\n        break;\n\n      default:\n    }\n  };\n\n  const handleDBSize = () => {\n    getDBSize();\n  };\n\n  const handleSingleItemSize = (kMB) => setSingleItemSize(kMB);\n  const handleAutoAddDB = () => {\n    setAuto(!auto);\n  };\n  const handleAddDB = () => {\n    if (!key2Del) {\n      alert(\"Key must NOT be empty\");\n    } else\n      addData2IDB_Safe(singleItemSize, key2Del, itemValue, () => {\n        getDBSize((total) => setTotalSize(total));\n\n        if (key2Del === \"myid\") {\n          getItemDataByKey(STORES.messages, key2Del); // update current\n          if (withUpdate) {\n            channel.postMessage({\n              // update others\n              action: \"UPDATE\",\n              store: \"messages\",\n              key: key2Del,\n            });\n          }\n        }\n      });\n  };\n  const handleEmptyDB = () => emptyIndexedDB(() => setTotalSize(0));\n  const handleDelByKey = () => {\n    if (!key2Del) {\n      alert(\"Key must NOT be empty\");\n    } else deleteItemByKey_Safe(key2Del, STORES.messages);\n  };\n\n  const handleItemValue = (value) => setItemValue(value);\n  const handleNewInpSize = (kMB) => setInpSize(kMB);\n  const onItemKeyChange = (key) => setKey2Del(key);\n\n  const getItemDataByKey = (store = STORES.messages, key = SAMPLE_KEY) =>\n    retrieveItemByKey(store, key, (data) => {\n      setStaleData(data);\n    });\n\n  useEffect(() => {\n    connect2DB((DBInstance) => {\n      getItemDataByKey();\n      getDBSize((total) => setTotalSize(total));\n      closeDBConnection(DBInstance);\n      setLoading(false);\n    });\n    return () => {\n      channel.close();\n    };\n  }, []);\n\n  useEffect(() => {\n    let autoAddTimer;\n    if (auto) {\n      autoAddTimer = setInterval(() => {\n        addData2IDB_Safe(inpSize, null, null, () =>\n          getDBSize((total) => setTotalSize(total))\n        );\n      }, 1000);\n    } else {\n      clearInterval(autoAddTimer);\n    }\n    return () => {\n      clearInterval(autoAddTimer);\n    };\n  }, [auto, totalSize, inpSize]);\n\n  return (\n    <>\n      <SStorage.Section style={{ height: \"90px\" }}>\n        <SStorage.InfoWrapper>\n          IndexedDB = <SStorage.Value>{ByteToMB(totalSize)}</SStorage.Value>\n        </SStorage.InfoWrapper>\n        <SStorage.Btn.Clear disabled={loading} onClick={handleEmptyDB}>\n          Reset\n        </SStorage.Btn.Clear>\n        <SStorage.Btn onClick={handleAutoAddDB} style={{ width: \"auto\" }}>\n          {auto ? \"Auto OFF\" : \"Auto ON\"}\n        </SStorage.Btn>\n\n        <InputField\n          type=\"number\"\n          placeholder=\"1MB\"\n          defaultVal=\"10\"\n          postTask={handleNewInpSize}\n        />\n      </SStorage.Section>\n      <SStorage.PlainSectionOuter style={{ height: \"90px\" }}>\n        <SStorage.InfoWrapper>Single Item</SStorage.InfoWrapper>\n        <SStorage.Btn.Clear disabled={loading} onClick={handleDelByKey}>\n          Delete\n        </SStorage.Btn.Clear>\n        <SStorage.Btn disabled={loading} onClick={handleAddDB}>\n          Add\n        </SStorage.Btn>\n        <SStorage.Btn disabled={loading} onClick={handleDBSize}>\n          Size\n        </SStorage.Btn>\n        <InputField\n          type=\"number\"\n          defaultVal=\"\"\n          placeholder=\"size\"\n          width=\"50px\"\n          postTask={handleSingleItemSize}\n        />\n        <InputField\n          type=\"text\"\n          placeholder=\"Value\"\n          defaultVal=\"\"\n          width=\"110px\"\n          postTask={handleItemValue}\n        />\n\n        <InputField\n          defaultVal=\"\"\n          placeholder=\"Object key\"\n          width=\"110px\"\n          postTask={onItemKeyChange}\n        />\n      </SStorage.PlainSectionOuter>\n      <SStorage.PlainSectionOuter style={{ height: \"150px\" }}>\n        <h4>Stale database due to multiple update</h4>\n        <input\n          type=\"checkbox\"\n          id=\"updateDummy\"\n          name=\"updateDummy\"\n          checked={withUpdate}\n          onChange={(e) => setWithUpdate(!withUpdate)}\n        />\n        <label htmlFor=\"updateDummy\">Trigger update on other tabs</label>\n        <SStorage.StaleData>\n          {SAMPLE_KEY} | {staleData}\n        </SStorage.StaleData>\n      </SStorage.PlainSectionOuter>\n    </>\n  );\n};\n\nexport { Database };\n","import React, { useEffect, useState } from \"react\";\nimport { getStr, ONE_MB } from \"../../lib/HelperFuncs\";\nimport { InputField } from \"./InputField\";\nimport SStorage from \"./StyledComp\";\n\nconst CACHE_NAME = \"demo-cache\";\n\nexport const addToCaches = async (cacheSize, postTask = null) => {\n  const path = `/cache_${Date.now().toString()}_${cacheSize}MB`;\n  const content = new Response(getStr(cacheSize * ONE_MB));\n\n  const cacheObj = await caches.open(CACHE_NAME);\n  return cacheObj\n    .put(path, content)\n    .then(() => {\n      console.log(`CACHE STORAGE: SUCCESSFULLY ADDED \"${path}\"`);\n      if (postTask) postTask();\n    })\n    .catch((err) => {\n      alert(\"CACHE STORAGE: ERROR! FAILED TO WRITE CACHE\");\n    });\n};\n\nexport async function emptyCache() {\n  const cache = await caches.open(CACHE_NAME);\n  const keys = await cache.keys();\n  keys.forEach((key) => {\n    cache.delete(key);\n  });\n  caches\n    .delete(CACHE_NAME)\n    .then(() => {\n      console.log(\"CACHE STORAGE:\", CACHE_NAME, \"IS DELETED\");\n    })\n    .then(() => {\n      window.location.reload(true);\n    })\n    .catch((error) =>\n      console.error(\"CACHE STORAGE: FAILED TO DELETE\", CACHE_NAME, error)\n    );\n}\n\nexport const MyCacheStorage = () => {\n  const [totalSize, setTotalSize] = useState(0);\n  const [inpSize, setInpSize] = useState(0);\n  const [auto, setAuto] = useState(false);\n\n  const handleAutoAddCache = () => setAuto(!auto);\n\n  const handleAddCache = () =>\n    addToCaches(inpSize, () => setTotalSize(totalSize + inpSize));\n  const handleEmptyCache = () => emptyCache();\n  const handleNewInpSize = (kMB) => setInpSize(kMB);\n\n  useEffect(() => {\n    let autoAddTimer;\n    if (auto) {\n      autoAddTimer = setInterval(() => {\n        addToCaches(inpSize, () => setTotalSize(totalSize + inpSize));\n      }, 1000);\n    } else {\n      clearInterval(autoAddTimer);\n    }\n    return () => {\n      clearInterval(autoAddTimer);\n    };\n  }, [auto, totalSize, inpSize]);\n\n  return (\n    <SStorage.Section>\n      <SStorage.InfoWrapper>\n        Cache Storage = <SStorage.Value>{totalSize}MB</SStorage.Value>\n      </SStorage.InfoWrapper>\n      <SStorage.Btn.Clear onClick={handleEmptyCache}>Empty</SStorage.Btn.Clear>\n      <SStorage.Btn onClick={handleAutoAddCache} style={{ width: \"120px\" }}>\n        {auto ? \"Auto OFF\" : \"Auto ON\"}\n      </SStorage.Btn>\n      <SStorage.Btn onClick={handleAddCache}>Add</SStorage.Btn>\n      <InputField type=\"number\" defaultVal=\"10\" postTask={handleNewInpSize} />\n    </SStorage.Section>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport {\n  emptyStorage,\n  LocalStorage,\n  QuotaStat,\n  SessionStorage,\n  emptyCache,\n  MyCacheStorage,\n  Database,\n  emptyIndexedDB,\n} from \"../components/Storage\";\n\nimport SStorage from \"../components/Storage/StyledComp\";\n\nconst StorageDemo = () => {\n  const [refetch, setRefetch] = useState(true);\n  const handleClearAll = () => {\n    emptyStorage(window.localStorage);\n    emptyStorage(window.sessionStorage);\n    emptyCache();\n    emptyIndexedDB();\n    setRefetch(!refetch);\n  };\n  return (\n    <SStorage.Wrapper>\n      <h2 className=\"center\">Offline Storage Demo</h2>\n      <QuotaStat refetch={refetch} setRefetch={setRefetch} />\n      <LocalStorage refetch={refetch} />\n      <SessionStorage refetch={refetch} />\n      <MyCacheStorage />\n      <Database />\n      <SStorage.SectionOuter>\n        <SStorage.Btn.ClearAll\n          id=\"clearAll-Btn\"\n          onClick={handleClearAll}\n          width=\"100%\"\n        >\n          CLEAR ALL\n        </SStorage.Btn.ClearAll>\n      </SStorage.SectionOuter>\n    </SStorage.Wrapper>\n  );\n};\n\nexport default StorageDemo;\n","import React from \"react\";\nimport \"./App.css\";\nimport StorageDemo from \"./pages/StorageDemo\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <StorageDemo/>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'));\n//registerServiceWorker();\n"],"sourceRoot":""}