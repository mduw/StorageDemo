{"version":3,"sources":["registerServiceWorker.js","lib/HelperFuncs.js","stores/MyStorageManager.js","components/DefaultStyledComp.js","components/Storage/StyledComp.js","components/Storage/QuotaStat.js","components/Storage/InputField.js","components/Storage/LocalSessionStorage.js","components/Storage/IndexedDB.js","components/Storage/MyCacheStorage.js","pages/StorageDemo.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ONE_MB","ByteToMB","val","result","Intl","NumberFormat","maximumFractionDigits","format","ex","Math","round","getStr","size","chars","split","len","length","random_data","push","random","join","useMyStorageManager","create","set","get","quota","total","usage","updateQuota","NewQuota","SDefault","Btn","styled","button","props","backgroundColor","color","padding","width","fontSize","disabled","InputField","input","Link","SStorage","Wrapper","div","InfoWrapper","span","Value","Section","section","SectionOuter","PlainSectionOuter","Clear","ClearAll","enableNotification","Notification","permission","requestPermission","alert","requestPersistStorage","a","storage","persist","persistent","checkPersistentStorage","postTask","isPersistedStorage","persisted","QuotaStat","refetch","setRefetch","useState","isPersisted","setIsPersisted","useEffect","checkInterval","setInterval","status","estimate","fetchQuota","clearInterval","toString","toUpperCase","onClick","style","display","margin","type","defaultVal","placeholder","rest","inp","setInp","parseInt","value","onChange","e","target","localStorage","sessionStorage","getStorageSize","storageType","key","hasOwnProperty","getItem","toFixed","addData2Storage","postError","setItem","name","emptyStorage","clear","Storage","totalSize","setTotalSize","inpSize","setInpSize","auto","setAuto","handleStorageChange","clearAllBtn","document","getElementById","addEventListener","removeEventListener","sizeCheckTimer","NewStorageSize","autoAddTimer","kMB","LocalStorage","SessionStorage","DB_NAME","STORES","users","messages","channel","BroadcastChannel","SAMPLE_KEY","print","msg","connect2DB","request","indexedDB","open","onerror","onsuccess","onupgradeneeded","DBInstance","currentTarget","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","put","onblocked","closeDBConnection","close","addData2IDB_Safe","itemSize","data","storeName","Date","toLocaleTimeString","transaction","objectStoreRequest","objectStore","event","preventDefault","stopPropagation","emptyIndexedDB","cleanupTask","delRequest","deleteDatabase","retrieveItemByKey","Database","loading","setLoading","key2Del","setKey2Del","staleData","setStaleData","itemValue","setItemValue","singleItemSize","setSingleItemSize","withUpdate","setWithUpdate","onmessage","action","getItemDataByKey","height","delete","deleteItemByKey_Safe","postMessage","id","checked","htmlFor","CACHE_NAME","addToCaches","cacheSize","path","now","content","Response","caches","cacheObj","err","emptyCache","cache","keys","forEach","reload","MyCacheStorage","StorageDemo","className","App","ReactDOM","render","URL","process","origin","fetch","response","headers","indexOf","ready","unregister","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.368d70cc.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const ONE_MB = 1000 * 1000;\n\nlet guid = () => {\n  let s4 = () => {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  };\n  return (\n    s4() +\n    s4() +\n    \"-\" +\n    s4() +\n    \"-\" +\n    s4() +\n    \"-\" +\n    s4() +\n    \"-\" +\n    s4() +\n    s4() +\n    s4()\n  );\n};\n\nexport const generateUID = () => {\n  return guid();\n};\n\nexport const isEmpty = (obj) =>\n  obj === null || obj === undefined || Object.keys(obj).length === 0;\n\nexport const ByteToMB = (val) => {\n  const opts = {\n    maximumFractionDigits: 1,\n  };\n  let result;\n  try {\n    result = new Intl.NumberFormat(\"en-us\", opts).format(val / ONE_MB);\n  } catch (ex) {\n    result = Math.round(val / ONE_MB);\n  }\n  return `${result} MB`;\n};\n\nexport function getStr(size = ONE_MB) {\n  let chars = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n  let len = chars.length;\n  let random_data = [];\n\n  while (size--) {\n    random_data.push(chars[(Math.random() * len) | 0]);\n  }\n\n  return random_data.join(\"\");\n}\n","import produce from \"immer\";\nimport create from \"zustand\";\n\nconst useMyStorageManager = create((set, get) => ({\n  quota: {\n    total: 0,\n    usage: 0,\n  },\n  updateQuota: (NewQuota) =>\n    set((state) => (state.quota = {...state.quota, ...NewQuota})),\n}));\n\nexport default useMyStorageManager;\n","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst SDefault = {};\n\nSDefault.Btn = styled.button`\n  background-color: ${(props) =>\n    props.backgroundColor ? props.backgroundColor : \"#0096ff\"};\n  color: ${(props) => (props.color ? props.color : \"white\")};\n  padding: ${(props) => (props.padding ? props.padding : \"10px 20px\")};\n  width: ${(props) => (props.width ? props.width : \"auto\")};\n  font-size: ${(props) => (props.fontSize ? props.fontSize : \"1em\")};\n  border-radius: 4px;\n  height: auto;\n  box-shadow: none;\n  border: none;\n  opacity: ${(props) => (props.disabled ? 0.5 : 1)};\n  outline: none;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nSDefault.InputField = styled.input`\n  display: block;\n  width: auto;\n  padding: 10px;\n  font-size: ${(props) => (props.fontSize ? props.fontSize : \"1em\")};\n  &:focus {\n    outline: none;\n    box-shadow: none;\n  }\n`;\n\nSDefault.Link = styled(Link)`\n  position: absolute;\n  text-decoration: none;\n  padding: 10px;\n  color: block;\n  font-weight: bold;\n  font-size: 1.2em;\n  color:white;\n  background-color: #008fe5;\n`;\n\nexport default SDefault;\n","import styled, { keyframes } from \"styled-components\";\nimport SDefault from \"../DefaultStyledComp\";\n\nconst SStorage = {};\n\nSStorage.Wrapper = styled.div`\n  padding: 24px;\n  min-width: 680px;\n  font-size: 18px;\n`;\n\nSStorage.Btn = styled(SDefault.Btn)`\n  float: right;\n  width: 100px;\n  margin: 40px 0 35px 30px;\n  text-align: center;\n  outline: none;\n  opacity: 0.9;\n  &:hover { opacity: 1; }\n`;\n\nSStorage.InfoWrapper = styled.span`\n  position: relative;\n  top: 50%;\n`;\n\nSStorage.Value = styled.span`\n  font-size: 1.2em;\n  font-weight: bold;\n`;\n\nSStorage.Section = styled.section`\n  position: relative;\n  display: block;\n  border-top: 1px solid lightgray;\n  margin: 26px auto;\n  height: 100px;\n  width: 80%;\n  padding: 0 10px;\n  @media (max-width: 990px) {\n    width: 100%;\n  }\n`;\n\nSStorage.SectionOuter = styled(SStorage.Section)`\n  border: none;\n  margin-top: 10vh;\n`;\nSStorage.PlainSectionOuter = styled(SStorage.Section)`\n  border: none;\n`;\nSStorage.Btn.Clear = styled(SStorage.Btn)`\n  background: #D44500;\n  width: 100px;\n`;\nSStorage.Btn.ClearAll = styled(SStorage.Btn)`\n  margin: -30px auto;\n  width: 220px;\n  float: right;\n  background: #D44500;\n`;\n\nSStorage.InputField = styled(SDefault.InputField)`\n  float: right;\n  margin: 40px 0 0 20px;\n  text-align: center;\n  padding: 8px;\n  border: none;\n  border-bottom: 1px solid black;\n  width: ${props => props.width ? props.width : '40px'};\n`;\n\nexport default SStorage;\n","import React, { useState, useEffect } from \"react\";\nimport { ByteToMB } from \"../../lib/HelperFuncs\";\nimport useMyStorageManager from \"../../stores/MyStorageManager\";\nimport SStorage from \"./StyledComp\";\n\nfunction enableNotification() {\n  if (Notification.permission === \"granted\") return;\n  if (!(\"Notification\" in window)) {\n    alert(\"This browser does not support desktop notification\");\n  } else {\n    Notification.requestPermission().then(function (permission) {\n      if (permission === \"granted\") {\n        alert(\"Notification enabled!\");\n        return true;\n      }\n    });\n  }\n  return false;\n}\nconst requestPersistStorage = async () => {\n  if (Notification.permission !== \"granted\") {\n    let enabled = enableNotification();\n    if (!enabled) {\n      alert(\"Allow notification before persisting storage\");\n      return;\n    }\n  }\n  if (navigator.storage && navigator.storage.persist)\n    navigator.storage.persist().then(function (persistent) {\n      if (persistent)\n        console.log(\n          \"Storage is persisted\"\n        );\n      else\n        console.log(\"Storage is NOT persisted\");\n    });\n};\n\nexport const checkPersistentStorage = async (postTask) => {\n  let isPersistedStorage = false;\n  if (navigator.storage && navigator.storage.persist) {\n    isPersistedStorage = await navigator.storage.persisted();\n    postTask(isPersistedStorage);\n  }\n};\n\nfunction fetchQuota(updateQuota) {\n  if (!updateQuota) return;\n  navigator.storage\n    .estimate()\n    .then(({ quota, usage }) => {\n      updateQuota({ total: quota, usage: usage });\n    })\n    .catch((error) => console.log(\"ERROR \", error));\n}\n\nconst QuotaStat = ({ refetch, setRefetch }) => {\n  const [isPersisted, setIsPersisted] = useState(true);\n  const quota = useMyStorageManager((state) => state.quota);\n  const updateQuota = useMyStorageManager((state) => state.updateQuota);\n\n  useEffect(() => {\n    enableNotification();\n    let checkInterval = setInterval(() => {\n      checkPersistentStorage((status) => setIsPersisted(status));\n      fetchQuota(updateQuota);\n    }, 1000);\n\n    return () => {\n      clearInterval(checkInterval);\n    };\n  }, []);\n  return (\n    <SStorage.SectionOuter>\n      <p>\n        isPersisted ={\" \"}\n        <SStorage.Value>{isPersisted.toString().toUpperCase()}</SStorage.Value>\n        <SStorage.Btn\n          onClick={requestPersistStorage}\n          style={{\n            display: \"inline-block\",\n            width: \"auto\",\n            margin: \"-8px 0 0 0\",\n          }}\n        >\n          Persist storage\n        </SStorage.Btn>\n      </p>\n      <div>Quota = Cache + IndexedDB. DOMStorage (local + session) is not included in Quota</div>\n      <div>\n        Used ={\" \"}\n        <SStorage.Value>\n          {ByteToMB(quota.usage)} / {ByteToMB(quota.total)}<small> </small>\n        </SStorage.Value>\n      </div>\n      <div>\n        Available ={\" \"}\n        <SStorage.Value>{ByteToMB(quota.total - quota.usage)}</SStorage.Value>\n      </div>\n    </SStorage.SectionOuter>\n  );\n};\n\nexport { QuotaStat };\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SStorage from \"./StyledComp\";\n\nconst InputField = (props) => {\n  const { type=\"string\", defaultVal = \"1\", placeholder, postTask, ...rest } = props;\n  const [inp, setInp] = useState(defaultVal);\n  const handleInp = (e) => setInp(e.target.value);\n  useEffect(() => {\n    if (inp) {\n      if (type=== \"number\") postTask(parseInt(inp));\n      else postTask(inp);\n    }\n  }, [inp]);\n  return <SStorage.InputField style={rest} placeholder={placeholder} value={inp} onChange={handleInp} />;\n};\n\nInputField.propTypes = {\n  defaultVal: PropTypes.string,\n  postTask: PropTypes.func.isRequired,\n};\n\nexport { InputField };\n","import { useEffect, useState } from \"react\";\nimport { getStr, ONE_MB } from \"../../lib/HelperFuncs\";\nimport { InputField } from \"./InputField\";\nimport SStorage from \"./StyledComp\";\n\nconst { localStorage, sessionStorage } = window;\n\nexport function getStorageSize(storageType) {\n  let total = 0;\n  for (let key in storageType) {\n    if (storageType.hasOwnProperty(key)) {\n      total += key.length + storageType.getItem(key).length;\n    }\n  }\n  return (total / ONE_MB).toFixed(0); // MB\n}\n\nexport function addData2Storage(\n  storageType,\n  size,\n  postTask = null,\n  postError = null\n) {\n  const key = `key${storageType.length + 1}_${size}MB`;\n  try {\n    storageType.setItem(key, getStr(size * ONE_MB));\n    if (postTask) postTask();\n  } catch (error) {\n    alert(`ERROR: '${error.name}'`);\n    if (postError) postError();\n  }\n}\n\nexport function emptyStorage(storageType) {\n  storageType.clear();\n}\n\nexport const Storage = ({ storageType, name }) => {\n  const [totalSize, setTotalSize] = useState(storageType.length);\n  const [inpSize, setInpSize] = useState(2);\n  const [auto, setAuto] = useState(false);\n\n  const handleAutoAdd2Storage = () => setAuto(!auto);\n  const handleAdd2Storage = () => {\n    addData2Storage(storageType, inpSize, () => {\n      console.log(`${name}: ADDED ${inpSize}MB`);\n      setTotalSize(getStorageSize(storageType));\n    });\n  };\n  const handleEmptyStorage = () => {\n    emptyStorage(storageType); // sync\n    setTotalSize(storageType.length);\n  };\n\n  const handleNewInpSize = (kMB) => setInpSize(kMB);\n\n  useEffect(() => {\n    const handleStorageChange = () => setTotalSize(getStorageSize(storageType));\n    const clearAllBtn = document.getElementById(\"clearAll-Btn\");\n    clearAllBtn.addEventListener(\"click\", handleStorageChange);\n    return () => {\n      clearAllBtn.removeEventListener(\"click\", handleStorageChange);\n    };\n  }, []);\n\n  useEffect(() => {\n    const sizeCheckTimer = setInterval(() => {\n      const NewStorageSize = getStorageSize(storageType);\n      if (NewStorageSize !== inpSize) setTotalSize(NewStorageSize);\n    }, 1500);\n    return () => {\n      clearInterval(sizeCheckTimer);\n    };\n  }, []);\n\n  useEffect(() => {\n    let autoAddTimer;\n    if (auto) {\n      autoAddTimer = setInterval(() => {\n        addData2Storage(\n          storageType,\n          inpSize,\n          () => {\n            console.log(`${name}: ADDED ${inpSize}MB`);\n            setTotalSize(getStorageSize(storageType));\n          },\n          () => {\n            setAuto(!auto);\n          }\n        );\n      }, 1000);\n    } else {\n      clearInterval(autoAddTimer);\n    }\n    return () => {\n      clearInterval(autoAddTimer);\n    };\n  }, [auto, totalSize, inpSize]);\n\n  return (\n    <>\n      <SStorage.Section>\n        <SStorage.InfoWrapper>\n          {name} = <SStorage.Value>{totalSize}MB</SStorage.Value>\n        </SStorage.InfoWrapper>\n        <SStorage.Btn.Clear onClick={handleEmptyStorage}>\n          Empty\n        </SStorage.Btn.Clear>\n        <SStorage.Btn onClick={handleAutoAdd2Storage} style={{ width: \"auto\" }}>\n          {auto ? \"Auto OFF\" : \"Auto ON\"}\n        </SStorage.Btn>\n        <SStorage.Btn onClick={handleAdd2Storage}>Add</SStorage.Btn>\n        <InputField\n          type=\"number\"\n          defaultVal={`${inpSize}`}\n          postTask={handleNewInpSize}\n        />\n      </SStorage.Section>\n    </>\n  );\n};\n\nexport const LocalStorage = () => (\n  <Storage storageType={localStorage} name={\"Local Storage\"} />\n);\nexport const SessionStorage = () => (\n  <Storage storageType={sessionStorage} name={\"Session Storage\"} />\n);\n","import React, { useEffect, useState, useRef, createRef } from \"react\";\nimport { getStr, ONE_MB } from \"../../lib/HelperFuncs\";\nimport { InputField } from \"./InputField\";\nimport SStorage from \"./StyledComp\";\n\nexport const DB_NAME = \"demo_db\";\nexport const STORES = {\n  users: \"users\",\n  messages: \"messages\",\n};\n\nconst channel = new BroadcastChannel(\"idb_changes\");\nconst SAMPLE_KEY = \"myid\";\n\nexport function print(msg) {\n  console.log(msg);\n}\n\nexport function connect2DB(postTask = null) {\n  const request = indexedDB.open(DB_NAME);\n  request.onerror = (error) => {\n    print(\"IndexedDB ERR: FAILED TO CONNECT\", error);\n  };\n  request.onsuccess = function () {\n    // print(\"IndexedDB: CONNECTED TO DB\");\n    if (postTask) postTask(request.result);\n  };\n  request.onupgradeneeded = function (e) {\n    const DBInstance = e.currentTarget.result;\n    for (let store in STORES) {\n      if (DBInstance.objectStoreNames.contains(store))\n        DBInstance.deleteObjectStore(store);\n      let objectStore = DBInstance.createObjectStore(store);\n      objectStore.put(\"1234\", SAMPLE_KEY);\n    }\n\n    connect2DB(postTask);\n  };\n  request.onblocked = () => {\n    print(\"IndexedDB: CONNECTION WAS BLOCKED\", error);\n  };\n}\n\nexport function closeDBConnection(DBInstance) {\n  if (DBInstance) {\n    DBInstance.close();\n    // print(\"IndexedDB: CONNECTION CLOSED\");\n  } else print(\"IndexedDB: DB NOT FOUND\");\n}\n\nexport function addData2IDB_Safe(\n  itemSize,\n  key = null,\n  data = null,\n  postTask = null\n) {\n  const storeName = STORES.messages;\n  if (!data) data = getStr(itemSize * ONE_MB);\n  if (!key) key = `${new Date().toLocaleTimeString()}_msg_${itemSize}MB`;\n  try {\n    connect2DB((DBInstance) => {\n      const transaction = DBInstance.transaction([storeName], \"readwrite\");\n      const objectStore = transaction.objectStore(storeName);\n      const objectStoreRequest = objectStore.put(data, key);\n\n      transaction.onerror = (event) => {\n        let error = event.target.error;\n        print(`IndexedDB: transaction error`, error);\n        if (error.name === \"ConstraintError\") {\n          alert(\"Key existed !\");\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      };\n\n      objectStoreRequest.onerror = (event) => {\n        print(\"IndexedDB ERR: FAILED TO ADD DATA\");\n      };\n      objectStoreRequest.onsuccess = function () {\n        print(\n          `[${new Date().toLocaleTimeString()}] IndexedDB: ADDED ${itemSize}MB`\n        );\n        closeDBConnection(DBInstance);\n        if (postTask) postTask();\n      };\n      objectStoreRequest.onblocked = () => {\n        print(`IndexedDB: BLOCKED ADDING ${itemSize}MB`);\n      };\n    });\n  } catch (error) {\n    print(\"IndexedDB ERR:\", error);\n  }\n}\n\nexport function deleteItemByKey_Safe(\n  key,\n  storeName = STORES.messages,\n  postTask = null\n) {\n  try {\n    connect2DB((DBInstance) => {\n      const transaction = DBInstance.transaction([storeName], \"readwrite\");\n      const objectStore = transaction.objectStore(storeName);\n      const objectStoreRequest = objectStore.delete(key);\n      objectStoreRequest.onerror = () => {\n        print(\"IndexedDB ERR: FAILED TO DELETE\", key);\n      };\n      objectStoreRequest.onsuccess = function () {\n        print(\"IndexedDB: DATA ROW DELETED\", key);\n        closeDBConnection(DBInstance);\n        if (postTask) postTask();\n      };\n    });\n  } catch (error) {\n    console.log(\"IndexedDB ERR:\", error);\n  }\n}\n\nexport const emptyIndexedDB = (cleanupTask = null) => {\n  const delRequest = window.indexedDB.deleteDatabase(DB_NAME);\n  delRequest.onsuccess = function () {\n    console.log(\"IndexedDB: \", DB_NAME, \"IS DELETED\");\n    if (cleanupTask) cleanupTask();\n  };\n  delRequest.onerror = function () {\n    alert(\"IndexedDB: FAILED TO DELETE\", DB_NAME);\n  };\n  delRequest.onblocked = function () {\n    alert(\"IndexedDB: OPERATION BEING BLOCKED\");\n  };\n};\n\nexport const retrieveItemByKey = (\n  storeName = STORES.messages,\n  key,\n  postTask = null\n) => {\n  try {\n    connect2DB((DBInstance) => {\n      const transaction = DBInstance.transaction([storeName], \"readonly\");\n      const objectStore = transaction.objectStore(storeName);\n      const objectStoreRequest = objectStore.get(key);\n\n      objectStoreRequest.onerror = (event) => {\n        print(\"IndexedDB ERR: FAILED TO GET\", key);\n      };\n      objectStoreRequest.onsuccess = function () {\n        closeDBConnection(DBInstance);\n        if (postTask) postTask(objectStoreRequest.result);\n      };\n    });\n  } catch (error) {\n    print(\"IndexedDB ERR:\", error);\n  }\n};\n\nconst Database = () => {\n  const [loading, setLoading] = useState(true);\n  const [inpSize, setInpSize] = useState(1);\n  const [totalSize, setTotalSize] = useState(0);\n  const [key2Del, setKey2Del] = useState();\n  const [auto, setAuto] = useState(false);\n  const [staleData, setStaleData] = useState(\"\");\n  const [itemValue, setItemValue] = useState(\"\");\n  const [singleItemSize, setSingleItemSize] = useState(1);\n  const [withUpdate, setWithUpdate] = useState(false);\n\n  channel.onmessage = (e) => {\n    const { action, store, key } = e.data;\n    switch (action) {\n      case \"UPDATE\":\n        getItemDataByKey(store, key);\n        break;\n\n      default:\n    }\n  };\n\n  const handleSingleItemSize = (kMB) => setSingleItemSize(kMB);\n  const handleAutoAddDB = () => {\n    setAuto(!auto);\n  };\n  const handleAddDB = () => {\n    if (!key2Del) {\n      alert(\"Key must NOT be empty\");\n    } else\n      addData2IDB_Safe(singleItemSize, key2Del, itemValue, () => {\n        getItemDataByKey(STORES.messages, key2Del);\n        setTotalSize(totalSize + singleItemSize);\n        if (withUpdate) {\n          channel.postMessage({\n            action: \"UPDATE\",\n            store: \"messages\",\n            key: key2Del,\n          });\n        }\n      });\n  };\n  const handleEmptyDB = () => emptyIndexedDB(() => setTotalSize(0));\n  const handleDelByKey = () => {\n    if (!key2Del) {\n      alert(\"Key must NOT be empty\");\n    } else deleteItemByKey_Safe(key2Del, STORES.messages);\n  };\n\n  const handleItemValue = (value) => setItemValue(value);\n  const handleNewInpSize = (kMB) => setInpSize(kMB);\n  const onItemKeyChange = (key) => setKey2Del(key);\n\n  const getItemDataByKey = (store = STORES.messages, key = SAMPLE_KEY) =>\n    retrieveItemByKey(store, key, (data) => {\n      setStaleData(data);\n    });\n\n  useEffect(() => {\n    connect2DB((DBInstance) => {\n      getItemDataByKey();\n      closeDBConnection(DBInstance);\n      setLoading(false);\n    });\n    return () => {\n      channel.close();\n    };\n  }, []);\n\n  useEffect(() => {\n    let autoAddTimer;\n    if (auto) {\n      autoAddTimer = setInterval(() => {\n        addData2IDB_Safe(inpSize, null, null, () =>\n          setTotalSize(totalSize + inpSize)\n        );\n      }, 1000);\n    } else {\n      clearInterval(autoAddTimer);\n    }\n    return () => {\n      clearInterval(autoAddTimer);\n    };\n  }, [auto, totalSize, inpSize]);\n\n  return (\n    <>\n      <SStorage.Section style={{ height: \"90px\" }}>\n        <SStorage.InfoWrapper>\n          IndexedDB = <SStorage.Value>{totalSize}MB</SStorage.Value>\n        </SStorage.InfoWrapper>\n        <SStorage.Btn.Clear disabled={loading} onClick={handleEmptyDB}>\n          Reset\n        </SStorage.Btn.Clear>\n        <SStorage.Btn onClick={handleAutoAddDB} style={{ width: \"auto\" }}>\n          {auto ? \"Auto OFF\" : \"Auto ON\"}\n        </SStorage.Btn>\n\n        <InputField\n          type=\"number\"\n          placeholder=\"1MB\"\n          defaultVal=\"10\"\n          postTask={handleNewInpSize}\n        />\n      </SStorage.Section>\n      <SStorage.PlainSectionOuter style={{ height: \"90px\" }}>\n        <SStorage.InfoWrapper>Single Item</SStorage.InfoWrapper>\n        <SStorage.Btn.Clear disabled={loading} onClick={handleDelByKey}>\n          Delete\n        </SStorage.Btn.Clear>\n        <SStorage.Btn disabled={loading} onClick={handleAddDB}>\n          Add\n        </SStorage.Btn>\n        <InputField\n          type=\"number\"\n          defaultVal=\"\"\n          placeholder=\"size\"\n          postTask={handleSingleItemSize}\n        />\n        <InputField\n          type=\"text\"\n          placeholder=\"Value\"\n          defaultVal=\"\"\n          width=\"110px\"\n          postTask={handleItemValue}\n        />\n\n        <InputField\n          defaultVal=\"\"\n          placeholder=\"Object key\"\n          width=\"110px\"\n          postTask={onItemKeyChange}\n        />\n      </SStorage.PlainSectionOuter>\n      <SStorage.PlainSectionOuter>\n        <h3>Stale database due to multiple update</h3>\n        <input\n          type=\"checkbox\"\n          id=\"updateDummy\"\n          name=\"updateDummy\"\n          checked={withUpdate}\n          onChange={(e) => setWithUpdate(!withUpdate)}\n        />\n        <label htmlFor=\"updateDummy\">Trigger update on other tabs</label>\n        <h3 style={{ margin: \"10px 0\", color: \"red\" }}>\n          {SAMPLE_KEY} | {staleData}\n        </h3>\n      </SStorage.PlainSectionOuter>\n    </>\n  );\n};\n\nexport { Database };\n","import React, { useEffect, useState } from \"react\";\nimport { getStr, ONE_MB } from \"../../lib/HelperFuncs\";\nimport { InputField } from \"./InputField\";\nimport SStorage from \"./StyledComp\";\n\nconst CACHE_NAME = \"demo-cache\";\n\nexport const addToCaches = async (cacheSize, postTask = null) => {\n  const path = `/cache_${Date.now().toString()}_${cacheSize}MB`;\n  const content = new Response(getStr(cacheSize * ONE_MB));\n\n  const cacheObj = await caches.open(CACHE_NAME);\n  return cacheObj\n    .put(path, content)\n    .then(() => {\n      console.log(`CACHE STORAGE: SUCCESSFULLY ADDED \"${path}\"`);\n      if (postTask) postTask();\n    })\n    .catch((err) => {\n      alert(\"CACHE STORAGE: ERROR! FAILED TO WRITE CACHE\");\n    });\n};\n\nexport async function emptyCache() {\n  const cache = await caches.open(CACHE_NAME);\n  const keys = await cache.keys();\n  keys.forEach((key) => {\n    cache.delete(key);\n  });\n  caches\n    .delete(CACHE_NAME)\n    .then(() => {\n      console.log(\"CACHE STORAGE:\", CACHE_NAME, \"IS DELETED\");\n    })\n    .then(() => {\n      window.location.reload(true);\n    })\n    .catch((error) =>\n      console.error(\"CACHE STORAGE: FAILED TO DELETE\", CACHE_NAME, error)\n    );\n}\n\nexport const MyCacheStorage = () => {\n  const [totalSize, setTotalSize] = useState(0);\n  const [inpSize, setInpSize] = useState(0);\n  const [auto, setAuto] = useState(false);\n\n  const handleAutoAddCache = () => setAuto(!auto);\n\n  const handleAddCache = () =>\n    addToCaches(inpSize, () => setTotalSize(totalSize + inpSize));\n  const handleEmptyCache = () => emptyCache();\n  const handleNewInpSize = (kMB) => setInpSize(kMB);\n\n  useEffect(() => {\n    let autoAddTimer;\n    if (auto) {\n      autoAddTimer = setInterval(() => {\n        addToCaches(inpSize, () => setTotalSize(totalSize + inpSize));\n      }, 1000);\n    } else {\n      clearInterval(autoAddTimer);\n    }\n    return () => {\n      clearInterval(autoAddTimer);\n    };\n  }, [auto, totalSize, inpSize]);\n\n  return (\n    <SStorage.Section>\n      <SStorage.InfoWrapper>\n        Cache Storage = <SStorage.Value>{totalSize}MB</SStorage.Value>\n      </SStorage.InfoWrapper>\n      <SStorage.Btn.Clear onClick={handleEmptyCache}>Empty</SStorage.Btn.Clear>\n      <SStorage.Btn onClick={handleAutoAddCache} style={{ width: \"120px\" }}>\n        {auto ? \"Auto OFF\" : \"Auto ON\"}\n      </SStorage.Btn>\n      <SStorage.Btn onClick={handleAddCache}>Add</SStorage.Btn>\n      <InputField type=\"number\" defaultVal=\"10\" postTask={handleNewInpSize} />\n    </SStorage.Section>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport {\n  emptyStorage,\n  LocalStorage,\n  QuotaStat,\n  SessionStorage,\n  emptyCache,\n  MyCacheStorage,\n  Database,\n  emptyIndexedDB,\n} from \"../components/Storage\";\n\nimport SStorage from \"../components/Storage/StyledComp\";\n\nconst StorageDemo = () => {\n  const [refetch, setRefetch] = useState(true);\n  const handleClearAll = () => {\n    emptyStorage(window.localStorage);\n    emptyStorage(window.sessionStorage);\n    emptyCache();\n    emptyIndexedDB();\n    setRefetch(!refetch);\n  };\n  return (\n    <SStorage.Wrapper>\n      <h2 className=\"center\">Offline Storage Demo</h2>\n      <QuotaStat refetch={refetch} setRefetch={setRefetch} />\n      <LocalStorage refetch={refetch} />\n      <SessionStorage refetch={refetch} />\n      <MyCacheStorage />\n      <Database />\n      <SStorage.SectionOuter>\n        <SStorage.Btn.ClearAll\n          id=\"clearAll-Btn\"\n          onClick={handleClearAll}\n          width=\"100%\"\n        >\n          CLEAR ALL\n        </SStorage.Btn.ClearAll>\n      </SStorage.SectionOuter>\n    </SStorage.Wrapper>\n  );\n};\n\nexport default StorageDemo;\n","import React from \"react\";\nimport \"./App.css\";\nimport StorageDemo from \"./pages/StorageDemo\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <StorageDemo/>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}