{"version":3,"sources":["registerServiceWorker.js","lib/HelperFuncs.js","stores/MyStorageManager.js","components/DefaultStyledComp.js","components/Storage/StyledComp.js","components/Storage/QuotaStat.js","components/Storage/InputField.js","components/Storage/LocalSessionStorage.js","components/Storage/IndexedDB.js","components/Storage/MyCacheStorage.js","pages/StorageDemo.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ONE_MB","ByteToMB","val","result","Intl","NumberFormat","maximumFractionDigits","format","ex","Math","round","getStr","size","chars","split","len","length","random_data","push","random","join","useMyStorageManager","create","set","get","quota","total","usage","updateQuota","NewQuota","SDefault","Btn","styled","button","props","backgroundColor","color","padding","width","fontSize","disabled","InputField","input","Link","SStorage","Wrapper","div","InfoWrapper","span","Value","Section","section","SectionOuter","Clear","ClearAll","checkPersistentStorage","postTask","a","isPersistedStorage","storage","persist","persisted","QuotaStat","refetch","setRefetch","useState","isPersisted","setIsPersisted","useEffect","status","checkInterval","setInterval","estimate","fetchQuota","clearInterval","toString","toUpperCase","type","defaultVal","placeholder","rest","inp","setInp","parseInt","style","value","onChange","e","target","localStorage","sessionStorage","getStorageSize","storageType","key","hasOwnProperty","getItem","toFixed","emptyStorage","clear","Storage","name","totalSize","setTotalSize","inpSize","setInpSize","handleStorageChange","clearAllBtn","document","getElementById","addEventListener","removeEventListener","sizeCheckTimer","NewStorageSize","onClick","setItem","addData2Storage","kMB","LocalStorage","SessionStorage","DB_NAME","STORES","users","messages","print","msg","connect2DB","request","indexedDB","open","onerror","onsuccess","onupgradeneeded","DBInstance","currentTarget","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","closeDBConnection","close","emptyIndexedDB","cleanupTask","delRequest","deleteDatabase","oncomplete","onblocked","Database","loading","setLoading","key2Del","setKey2Del","itemSize","storeName","data","Date","now","objectStoreRequest","transaction","objectStore","add","addData2IDB_Safe","delete","deleteItemByKey_Safe","CACHE_NAME","addToCaches","cacheSize","path","content","Response","caches","cacheObj","put","err","alert","emptyCache","cache","keys","forEach","reload","MyCacheStorage","StorageDemo","className","id","App","ReactDOM","render","URL","process","origin","fetch","response","headers","indexOf","ready","unregister","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5de40803.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nexport const ONE_MB = 1024 * 1024;\n\nlet guid = () => {\n  let s4 = () => {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  };\n  return (\n    s4() +\n    s4() +\n    \"-\" +\n    s4() +\n    \"-\" +\n    s4() +\n    \"-\" +\n    s4() +\n    \"-\" +\n    s4() +\n    s4() +\n    s4()\n  );\n};\n\nexport const generateUID = () => {\n  return guid();\n};\n\nexport const isEmpty = (obj) =>\n  obj === null || obj === undefined || Object.keys(obj).length === 0;\n\nexport const ByteToMB = (val) => {\n  const opts = {\n    maximumFractionDigits: 0,\n  };\n  let result;\n  try {\n    result = new Intl.NumberFormat(\"en-us\", opts).format(val / ONE_MB);\n  } catch (ex) {\n    result = Math.round(val / ONE_MB);\n  }\n  return `${result} MB`;\n};\n\nexport function getStr(size = ONE_MB) {\n  let chars = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n  let len = chars.length;\n  let random_data = [];\n\n  while (size--) {\n    random_data.push(chars[(Math.random() * len) | 0]);\n  }\n\n  return random_data.join(\"\");\n}\n","import produce from \"immer\";\nimport create from \"zustand\";\n\nconst useMyStorageManager = create((set, get) => ({\n  quota: {\n    total: 0,\n    usage: 0,\n  },\n  updateQuota: (NewQuota) =>\n    set((state) => (state.quota = {...state.quota, ...NewQuota})),\n}));\n\nexport default useMyStorageManager;\n","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst SDefault = {};\n\nSDefault.Btn = styled.button`\n  background-color: ${(props) =>\n    props.backgroundColor ? props.backgroundColor : \"#0096ff\"};\n  color: ${(props) => (props.color ? props.color : \"white\")};\n  padding: ${(props) => (props.padding ? props.padding : \"10px 20px\")};\n  width: ${(props) => (props.width ? props.width : \"auto\")};\n  font-size: ${(props) => (props.fontSize ? props.fontSize : \"1em\")};\n  border-radius: 4px;\n  height: auto;\n  box-shadow: none;\n  border: none;\n  opacity: ${(props) => (props.disabled ? 0.5 : 1)};\n  outline: none;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nSDefault.InputField = styled.input`\n  display: block;\n  width: auto;\n  padding: 10px;\n  font-size: ${(props) => (props.fontSize ? props.fontSize : \"1em\")};\n  &:focus {\n    outline: none;\n    box-shadow: none;\n  }\n`;\n\nSDefault.Link = styled(Link)`\n  position: absolute;\n  text-decoration: none;\n  padding: 10px;\n  color: block;\n  font-weight: bold;\n  font-size: 1.2em;\n  color:white;\n  background-color: #008fe5;\n`;\n\nexport default SDefault;\n","import styled, { keyframes } from \"styled-components\";\nimport SDefault from \"../DefaultStyledComp\";\n\nconst SStorage = {};\n\nSStorage.Wrapper = styled.div`\n  padding: 24px;\n  min-width: 500px;\n`;\n\nSStorage.Btn = styled(SDefault.Btn)`\n  float: right;\n  width: 100px;\n  margin: 20px 0 20px 20px;\n  text-align: center;\n  outline: none;\n  opacity: 0.9;\n  &:hover { opacity: 1; }\n`;\n\nSStorage.InfoWrapper = styled.span`\n  position: relative;\n  top: 50%;\n`;\n\nSStorage.Value = styled.span`\n  font-size: 1.2em;\n  font-weight: bold;\n`;\n\nSStorage.Section = styled.section`\n  display: block;\n  border-top: 0px solid lightgray;\n  margin: 26px auto;\n  height: 60px;\n  width: 50%;\n  padding: 0 10px;\n  @media (max-width: 990px) {\n    width: 100%;\n  }\n`;\n\nSStorage.SectionOuter = styled(SStorage.Section)`\n  border: none;\n  margin-top: 10vh;\n`;\nSStorage.Btn.Clear = styled(SStorage.Btn)`\n  background: #D44500;\n  width: 100px;\n`;\nSStorage.Btn.ClearAll = styled(SStorage.Btn)`\n  margin: -30px auto;\n  width: 220px;\n  float: right;\n  background: #D44500;\n`;\n\nSStorage.InputField = styled(SDefault.InputField)`\n  float: right;\n  margin: 20px 0 0 20px;\n  text-align: center;\n  padding: 8px;\n  width: 35px;\n`;\n\nexport default SStorage;\n","import React, { useState, useEffect } from \"react\";\nimport { ByteToMB } from \"../../lib/HelperFuncs\";\nimport useMyStorageManager from \"../../stores/MyStorageManager\";\nimport SStorage from \"./StyledComp\";\n\nexport const checkPersistentStorage = async (postTask) => {\n  let isPersistedStorage = false;\n  if (navigator.storage && navigator.storage.persist) {\n    isPersistedStorage = await navigator.storage.persisted();\n    console.log(`Persisted storage status: ${isPersistedStorage}`);\n    postTask(isPersistedStorage);\n  }\n};\n\nfunction fetchQuota(updateQuota) {\n  if (!updateQuota) return;\n  navigator.storage\n    .estimate()\n    .then(({ quota, usage }) => {\n      updateQuota({ total: quota, usage: usage });\n    })\n    .catch((error) => console.log(\"ERROR \", error));\n}\n\nconst QuotaStat = ({ refetch, setRefetch }) => {\n  const [isPersisted, setIsPersisted] = useState(true);\n  const quota = useMyStorageManager((state) => state.quota);\n  const updateQuota = useMyStorageManager((state) => state.updateQuota);\n\n  useEffect(() => {\n    checkPersistentStorage((status) => setIsPersisted(status));\n    // passive update\n    let checkInterval = setInterval(() => {\n      fetchQuota(updateQuota);\n    }, 1000);\n    \n    return () => {\n      clearInterval(checkInterval);\n    };\n  }, []);\n  return (\n    <SStorage.SectionOuter>\n      <p>\n        isPersisted ={\" \"}\n        <SStorage.Value>{isPersisted.toString().toUpperCase()}</SStorage.Value>\n      </p>\n      <div>\n        Used ={\" \"}\n        <SStorage.Value>\n          {ByteToMB(quota.usage)} / {ByteToMB(quota.total)}\n        </SStorage.Value>\n      </div>\n      <div>\n        Available ={\" \"}\n        <SStorage.Value>{ByteToMB(quota.total - quota.usage)}</SStorage.Value>\n      </div>\n    </SStorage.SectionOuter>\n  );\n};\n\nexport { QuotaStat };\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SStorage from \"./StyledComp\";\n\nconst InputField = (props) => {\n  const { type=\"string\", defaultVal = \"1\", placeholder, postTask, ...rest } = props;\n  const [inp, setInp] = useState(defaultVal);\n  const handleInp = (e) => setInp(e.target.value);\n  useEffect(() => {\n    if (inp) {\n      if (type=== \"number\") postTask(parseInt(inp));\n      else postTask(inp);\n    }\n  }, [inp]);\n  return <SStorage.InputField style={rest} placeholder={placeholder} value={inp} onChange={handleInp} />;\n};\n\nInputField.propTypes = {\n  defaultVal: PropTypes.string,\n  postTask: PropTypes.func.isRequired,\n};\n\nexport { InputField };\n","import { useEffect, useState } from \"react\";\nimport { getStr, ONE_MB } from \"../../lib/HelperFuncs\";\nimport { InputField } from \"./InputField\";\nimport SStorage from \"./StyledComp\";\n\nconst { localStorage, sessionStorage } = window;\n\nexport function getStorageSize(storageType) {\n  let total = 0;\n  for (let key in storageType) {\n    if (storageType.hasOwnProperty(key)) {\n      total += key.length + storageType.getItem(key).length;\n    }\n  }\n  return (total / ONE_MB).toFixed(0); // MB\n}\n\nexport function addData2Storage(storageType, size, postTask = null) {\n  const key = `key${storageType.length + 1}_${size}MB`;\n  try {\n    storageType.setItem(key, getStr(size * ONE_MB));\n    if (postTask) postTask();\n  } catch (error) {\n    console.log(`ERROR: '${error.name}'`);\n  }\n}\n\nexport function emptyStorage(storageType) {\n  storageType.clear();\n}\n\nexport const Storage = ({ storageType, name }) => {\n  const [totalSize, setTotalSize] = useState(storageType.length);\n  const [inpSize, setInpSize] = useState(0);\n  const handleAdd2Storage = () => {\n    addData2Storage(storageType, inpSize, () => {\n      console.log(`${name}: ADDED ${inpSize}MB`);\n      setTotalSize(getStorageSize(storageType));\n    });\n  };\n  const handleEmptyStorage = () => {\n    emptyStorage(storageType); // sync\n    setTotalSize(storageType.length);\n  };\n\n  const handleNewInpSize = (kMB) => setInpSize(kMB);\n\n  useEffect(() => {\n    const handleStorageChange = () => setTotalSize(getStorageSize(storageType));\n    const clearAllBtn = document.getElementById(\"clearAll-Btn\");\n    clearAllBtn.addEventListener(\"click\", handleStorageChange);\n    return () => {\n      clearAllBtn.removeEventListener(\"click\", handleStorageChange);\n    };\n  }, []);\n\n  useEffect(() => {\n    const sizeCheckTimer = setInterval(() => {\n      const NewStorageSize = getStorageSize(storageType);\n      if (NewStorageSize !== inpSize) setTotalSize(NewStorageSize);\n    }, 1500);\n    return () => {\n      clearInterval(sizeCheckTimer);\n    };\n  }, []);\n\n  return (\n    <SStorage.Section>\n      <SStorage.InfoWrapper>\n        {name} = <SStorage.Value>{totalSize}MB</SStorage.Value>\n      </SStorage.InfoWrapper>\n      <SStorage.Btn.Clear onClick={handleEmptyStorage}>Empty</SStorage.Btn.Clear>\n      <SStorage.Btn onClick={handleAdd2Storage}>Add</SStorage.Btn>\n      <InputField postTask={handleNewInpSize} />\n    </SStorage.Section>\n  );\n};\n\nexport const LocalStorage = () => (\n  <Storage storageType={localStorage} name={\"Local Storage\"} />\n);\nexport const SessionStorage = () => (\n  <Storage storageType={sessionStorage} name={\"Session Storage\"} />\n);\n","import React, { useEffect, useState } from \"react\";\nimport { getStr, ONE_MB } from \"../../lib/HelperFuncs\";\nimport { InputField } from \"./InputField\";\nimport SStorage from \"./StyledComp\";\n\nexport const DB_NAME = \"demo_db\";\nexport const STORES = {\n  users: \"users\",\n  messages: \"messages\",\n};\n\nexport function print(msg) { console.log(msg); }\n\nexport function connect2DB(postTask = null) {\n\tconst request = indexedDB.open(DB_NAME);\n\trequest.onerror = (error) => { print(\"IndexedDB ERR: FAILED TO CONNECT\", error); }\n\trequest.onsuccess = function(){\n    print(\"IndexedDB: CONNECTED TO DB\");\n    if (postTask) postTask(request.result);\n\t}\n\trequest.onupgradeneeded = function(e){\n\t\tconst DBInstance = e.currentTarget.result;\n\t\tfor (let store in STORES) {\n      if (DBInstance.objectStoreNames.contains(store)) DBInstance.deleteObjectStore(store);\n      DBInstance.createObjectStore(store); \n    }\n\n\t\tconnect2DB(postTask);\n\t}\n}\n\nexport function closeDBConnection(DBInstance) {\n  if (DBInstance) {\n    DBInstance.close();\n    print(\"IndexedDB: CONNECTION CLOSED\");\n  } else print(\"IndexedDB: DB NOT FOUND\");\n}\n\nexport function addData2IDB_Safe(itemSize, postTask = null) {\n  const storeName = STORES.messages;\n  const data = getStr(itemSize * ONE_MB);\n  const key = `msg_${Date.now().toString()}`;\n  try {\n    connect2DB((DBInstance) => {\n      const transaction = DBInstance.transaction([storeName], \"readwrite\");\n      const objectStore = transaction.objectStore(storeName);\n      const objectStoreRequest = objectStore.add(data, key);\n      objectStoreRequest.onerror = () => { print(\"IndexedDB ERR: FAILED TO ADD DATA\"); };\n      objectStoreRequest.onsuccess = function(){\n        print(\"IndexedDB: DATA ROW ADDED\");\n        closeDBConnection(DBInstance);\n        if (postTask) postTask();\n      }\n    });\n\n  } catch (error) {\n    print(\"IndexedDB ERR:\", error);\n  }\n}\n\nexport function deleteItemByKey_Safe(key, storeName = STORES.messages, postTask=null) {\n  try {\n    connect2DB((DBInstance) => {\n      const transaction = DBInstance.transaction([storeName], \"readwrite\");\n      const objectStore = transaction.objectStore(storeName);\n      const objectStoreRequest = objectStore.delete(key);\n      objectStoreRequest.onerror = () => { print(\"IndexedDB ERR: FAILED TO DELETE\", key); };\n      objectStoreRequest.onsuccess = function(){\n        print(\"IndexedDB: DATA ROW DELETED\", key);\n        closeDBConnection(DBInstance);\n        if (postTask) postTask();\n      }\n    });\n\n  } catch (error) {\n    console.log(\"IndexedDB ERR:\", error);\n  }\n}\n\nexport const emptyIndexedDB = (cleanupTask = null) => {\n  const delRequest = window.indexedDB.deleteDatabase(DB_NAME);\n  delRequest.oncomplete = function () {\n    console.log(\"IndexedDB: \", DB_NAME, \"IS DELETED\");\n    if (cleanupTask) cleanupTask();\n  };\n  delRequest.onerror = function () {\n    console.log(\"IndexedDB: FAILED TO DELETE\", DB_NAME);\n  };\n  delRequest.onblocked = function () {\n    console.log(\"IndexedDB: OPERATION BEING BLOCKED\");\n  };\n};\n\nconst Database = () => {\n  const [loading, setLoading] = useState(true);\n  const [inpSize, setInpSize] = useState(1);\n  const [totalSize, setTotalSize] = useState(0);\n  const [key2Del, setKey2Del] = useState();\n\n  const handleAddDB = () =>\n    addData2IDB_Safe(inpSize, () => setTotalSize(totalSize + inpSize));\n  const handleEmptyDB = () => emptyIndexedDB(() => setTotalSize(0));\n  const handleDelByKey = () => deleteItemByKey_Safe(key2Del, STORES.messages);\n\n  const handleNewInpSize = (kMB) => setInpSize(kMB);\n  const onItemKeyChange = (key) => setKey2Del(key);\n\n  useEffect(() => {\n    connect2DB((DBInstance) => {\n      closeDBConnection(DBInstance);\n      setLoading(false);\n    });  \n  }, []);\n\n  return (\n    <>\n      <SStorage.Section>\n        <SStorage.InfoWrapper>\n          IndexedDB = <SStorage.Value>{totalSize}MB</SStorage.Value>\n        </SStorage.InfoWrapper>\n        <SStorage.Btn.Clear disabled={loading} onClick={handleEmptyDB}>\n          Reset\n        </SStorage.Btn.Clear>\n        <SStorage.Btn disabled={loading} onClick={handleAddDB}>\n          Add\n        </SStorage.Btn>\n        <InputField type=\"number\" postTask={handleNewInpSize} />\n      </SStorage.Section>\n      <SStorage.Section>\n        <SStorage.Btn.Clear disabled={loading} onClick={handleDelByKey}>\n          Delete\n        </SStorage.Btn.Clear>\n        <InputField\n          defaultVal=\"\"\n          placeholder=\"Object key\"\n          width=\"80px\"\n          postTask={onItemKeyChange}\n        />\n      </SStorage.Section>\n    </>\n  );\n};\n\nexport { Database };\n","import React, { useEffect, useState } from \"react\";\nimport { getStr, ONE_MB } from \"../../lib/HelperFuncs\";\nimport { InputField } from \"./InputField\";\nimport SStorage from \"./StyledComp\";\n\nconst CACHE_NAME = \"demo-cache\";\n\nexport const addToCaches = async (cacheSize, postTask) => {\n  const path = `/cache_${Date.now().toString()}_${cacheSize}MB`;\n  const content = new Response(getStr(cacheSize * ONE_MB));\n\n  const cacheObj = await caches.open(CACHE_NAME);\n  return cacheObj\n    .put(path, content)\n    .then(() => {\n      console.log(`CACHE STORAGE: SUCCESSFULLY ADDED \"${path}\"`);\n      postTask();\n    })\n    .catch((err) => {\n      alert(\"CACHE STORAGE: ERROR! FAILED TO WRITE CACHE\");\n    });\n};\n\nexport async function emptyCache() {\n  const cache = await caches.open(CACHE_NAME);\n  const keys = await cache.keys();\n  keys.forEach((key) => {\n    cache.delete(key);\n  });\n  caches\n    .delete(CACHE_NAME)\n    .then(() => {\n      console.log(\"CACHE STORAGE:\", CACHE_NAME, \"IS DELETED\");\n    })\n    .then(() => {\n      window.location.reload(true);\n    })\n    .catch((error) =>\n      console.error(\"CACHE STORAGE: FAILED TO DELETE\", CACHE_NAME, error)\n    );\n}\n\nexport const MyCacheStorage = () => {\n  const [totalSize, setTotalSize] = useState(0);\n  const [inpSize, setInpSize] = useState(0);\n\n  const handleAddCache = () =>\n    addToCaches(inpSize, () => setTotalSize(totalSize + inpSize));\n  const handleEmptyCache = () => emptyCache();\n  const handleNewInpSize = (kMB) => setInpSize(kMB);\n\n  return (\n    <SStorage.Section>\n      <SStorage.InfoWrapper>\n        Cache Storage = <SStorage.Value>{totalSize}MB</SStorage.Value>\n      </SStorage.InfoWrapper>\n      <SStorage.Btn.Clear onClick={handleEmptyCache}>Empty</SStorage.Btn.Clear>\n      <SStorage.Btn onClick={handleAddCache}>Add</SStorage.Btn>\n      <InputField type=\"number\" postTask={handleNewInpSize} />\n    </SStorage.Section>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport {\n  emptyStorage,\n  LocalStorage,\n  QuotaStat,\n  SessionStorage,\n  emptyCache,\n  MyCacheStorage,\n  Database,\n  emptyIndexedDB,\n} from \"../components/Storage\";\n\nimport SStorage from \"../components/Storage/StyledComp\";\n\nconst StorageDemo = () => {\n  const [refetch, setRefetch] = useState(true);\n  const handleClearAll = () => {\n    emptyStorage(window.localStorage);\n    emptyStorage(window.sessionStorage);\n    emptyCache();\n    emptyIndexedDB();\n    setRefetch(!refetch);\n  };\n  return (\n    <SStorage.Wrapper>\n      <h2 className=\"center\">Offline Storage Demo</h2>\n\n      <QuotaStat refetch={refetch} setRefetch={setRefetch} />\n      <LocalStorage refetch={refetch} />\n      <SessionStorage refetch={refetch} />\n      <MyCacheStorage />\n      <Database />\n      <SStorage.SectionOuter>\n        <SStorage.Btn.ClearAll\n          id=\"clearAll-Btn\"\n          onClick={handleClearAll}\n          width=\"100%\"\n        >\n          CLEAR ALL\n        </SStorage.Btn.ClearAll>\n      </SStorage.SectionOuter>\n    </SStorage.Wrapper>\n  );\n};\n\nexport default StorageDemo;\n","import React from \"react\";\nimport \"./App.css\";\nimport StorageDemo from \"./pages/StorageDemo\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <StorageDemo/>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}